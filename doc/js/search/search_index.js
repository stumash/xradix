var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/RadixNode.html",[0,0.599,1,0.937]],["body/classes/RadixNode.html",[0,0.332,1,1.005,2,0.64,3,0.791,4,0.791,5,0.64,6,1.803,7,0.994,8,0.256,9,1.242,10,2.371,11,2.516,12,2.094,13,1.242,14,2.044,15,2.044,16,2.044,17,2.523,18,0.791,19,2.044,20,2.169,21,2.371,22,1.533,23,2.169,24,2.044,25,1.56,26,1.591,27,1.239,28,1.404,29,1.526,30,0.084,31,1.526,32,1.267,33,1.526,34,1.737,35,1.302,36,1.239,37,0.814,38,1.302,39,2.044,40,1.984,41,2.072,42,1.302,43,1.689,44,1.404,45,1.619,46,2.044,47,1.533,48,3.569,49,1.302,50,1.887,51,2.044,52,3.013,53,1.302,54,1.56,55,3.296,56,1.56,57,2.858,58,2.044,59,1.753,60,2.044,61,2.044,62,2.044,63,2.044,64,1.004,65,2.044,66,1.313,67,1.737,68,1.138,69,2.044,70,0.791,71,1.302,72,2.182,73,1.242,74,1.302,75,2.044,76,1.56,77,1.887,78,2.182,79,2.044,80,2.182,81,2.523,82,2.044,83,1.526,84,2.044,85,1.56,86,2.169,87,2.044,88,0.814,89,1.005,90,1.56,91,2.044,92,1.56,93,1.56,94,1.737,95,0.791,96,0.994,97,1.242,98,1.004,99,0.994,100,2.044,101,0.994,102,0.994,103,0.994,104,0.791,105,1.302,106,1.302,107,0.994,108,2.044,109,1.242,110,2.044,111,2.044,112,1.302,113,2.003,114,1.496,115,2.044,116,1.302,117,1.302,118,2.044,119,1.302,120,1.302,121,0.64,122,1.56,123,0.519,124,1.302,125,1.56,126,0.791,127,1.302,128,1.302,129,1.302,130,2.003,131,1.302,132,0.994,133,1.302,134,1.302,135,0.791,136,1.302,137,1.302,138,1.302,139,1.302,140,1.302,141,1.302,142,2.044,143,1.302,144,1.302,145,1.302,146,2.523,147,1.302,148,1.302,149,1.302,150,1.302,151,1.302,152,1.302,153,1.302,154,2.044,155,2.044,156,2.044,157,2.044,158,1.302,159,1.302,160,1.302,161,0.024,162,0.037,163,0.024]],["title/classes/RadixNodeEdges.html",[0,0.599,36,1.155]],["body/classes/RadixNodeEdges.html",[0,0.339,1,1.616,2,0.654,3,0.809,4,0.809,5,0.654,6,1.949,8,0.262,9,1.264,12,2.297,13,1.264,18,0.809,20,1.758,22,1.555,23,2.378,26,1.631,27,0.654,29,1.634,30,0.084,31,1.634,32,1.213,33,1.634,34,0.809,36,1.634,37,1.02,40,2.08,43,1.153,44,1.922,45,1.634,47,1.758,56,1.588,59,2.043,64,0.654,66,1.433,70,0.809,76,2.54,88,0.53,94,0.809,97,1.758,104,0.809,109,0.809,113,0.809,114,1.02,121,1.634,123,0.53,130,1.555,135,1.758,161,0.024,162,0.06,163,0.024,164,1.017,165,1.588,166,4.158,167,2.08,168,2.893,169,2.893,170,1.588,171,2.893,172,2.08,173,2.08,174,1.588,175,2.08,176,1.022,177,2.08,178,2.56,179,2.56,180,2.209,181,2.893,182,2.08,183,2.54,184,2.746,185,2.08,186,2.56,187,2.08,188,2.08,189,2.08,190,1.264,191,2.08,192,2.08,193,2.08,194,1.331,195,1.588,196,1.331,197,2.08,198,2.08,199,2.08,200,2.822,201,1.331,202,2.209,203,2.08,204,1.588,205,2.08,206,3.327,207,2.746,208,2.08,209,1.331,210,1.588,211,1.331,212,2.209,213,2.08,214,1.331,215,2.08,216,2.08,217,1.331,218,2.209,219,1.331,220,2.08,221,1.331,222,1.331,223,1.331,224,2.08,225,2.08,226,1.331,227,1.331,228,1.331,229,1.017,230,1.331,231,1.331,232,2.54,233,1.331,234,2.08,235,2.08,236,1.331,237,1.331,238,1.331,239,2.08,240,2.08,241,2.08,242,1.331,243,1.331,244,1.331,245,1.331,246,1.331,247,1.331]],["title/classes/RadixTree.html",[0,0.599,248,1.155]],["body/classes/RadixTree.html",[0,0.508,1,1.538,2,0.453,3,0.561,4,0.561,5,0.453,6,1.734,8,0.182,9,0.939,12,2.096,13,0.939,18,0.561,20,2.04,21,2.144,22,1.211,23,2.096,25,1.18,26,1.188,27,1.769,28,1.769,29,1.649,30,0.085,31,1.649,32,1.176,33,1.649,34,0.939,37,1.246,40,2.058,41,1.275,43,1.538,44,1.649,45,0.759,47,1.211,50,1.578,52,1.18,54,1.18,59,1.933,64,1.465,66,0.929,67,1.211,68,1.406,70,0.939,72,1.78,73,0.939,77,1.417,78,1.18,80,0.704,83,0.759,85,1.18,86,1.578,88,0.615,89,1.295,92,1.18,94,1.211,95,2.227,96,0.704,97,0.561,98,0.759,99,0.704,104,0.561,107,1.18,109,1.707,113,2.04,114,1.538,121,0.453,122,1.18,123,0.794,125,1.18,126,0.939,130,0.561,132,0.704,135,0.939,161,0.042,162,0.051,163,0.017,170,1.78,174,1.78,176,1.38,180,1.78,183,2.144,184,0.704,190,0.939,195,0.704,200,3.092,202,1.18,204,0.704,207,1.18,210,1.18,212,0.704,218,1.18,229,0.704,232,2.841,248,1.649,249,0.704,250,2.277,251,1.545,252,1.545,253,1.545,254,1.545,255,1.994,256,1.545,257,1.545,258,1.545,259,2.332,260,1.545,261,0.923,262,3.601,263,0.923,264,1.545,265,2.695,266,0.923,267,1.994,268,1.545,269,0.923,270,1.522,271,1.545,272,0.923,273,0.923,274,2.332,275,2.596,276,0.923,277,1.994,278,0.923,279,0.923,280,0.923,281,0.923,282,1.994,283,2.332,284,1.545,285,1.545,286,0.923,287,1.545,288,1.78,289,1.545,290,1.545,291,1.545,292,1.545,293,1.545,294,3.128,295,2.809,296,1.545,297,2.596,298,0.923,299,1.545,300,1.545,301,0.561,302,2.332,303,2.809,304,0.923,305,2.596,306,1.994,307,3.45,308,2.332,309,0.923,310,0.923,311,2.809,312,2.332,313,1.545,314,1.545,315,0.923,316,0.923,317,0.923,318,0.923,319,0.923,320,0.923,321,0.923,322,0.923,323,0.923,324,1.545,325,0.704,326,0.923,327,0.923,328,0.923,329,0.923,330,0.923,331,0.923,332,0.923,333,0.923,334,0.923,335,0.923,336,1.994,337,0.923,338,0.923,339,0.923,340,1.545,341,0.923,342,0.923,343,1.545,344,1.545,345,0.704,346,1.545,347,0.923,348,0.923,349,1.545,350,0.923,351,0.923,352,0.923,353,0.923,354,0.923]],["title/coverage.html",[355,2.402]],["body/coverage.html",[0,1.023,1,1.223,5,1.508,6,1.973,7,2.343,26,1.223,30,0.081,32,0.985,36,1.508,66,1.223,68,1.223,83,1.973,98,1.508,161,0.056,162,0.068,163,0.056,164,2.343,248,1.508,249,2.343,301,1.865,355,2.343,356,3.069,357,3.069,358,3.069,359,3.069,360,3.069,361,3.069,362,3.069,363,3.069,364,3.069,365,2.539,366,2.343,367,4.017,368,4.017,369,2.343,370,3.069,371,3.069,372,3.069,373,3.069]],["title/dependencies.html",[374,1.996,375,2.146]],["body/dependencies.html",[30,0.077,68,1.399,101,2.681,102,2.681,103,2.681,161,0.064,162,0.073,163,0.064,375,2.681,376,3.512]],["title/miscellaneous/enumerations.html",[377,0.393,378,2.146]],["body/miscellaneous/enumerations.html",[8,0.661,28,1.651,30,0.08,86,2.392,89,1.663,161,0.061,162,0.071,163,0.061,377,0.661,378,2.565,379,2.565,380,2.565,381,3.36,382,2.565,383,3.36,384,3.36,385,3.36,386,3.36,387,3.36,388,3.36]],["title/miscellaneous/functions.html",[377,0.393,389,2.146]],["body/miscellaneous/functions.html",[8,0.505,29,1.817,30,0.084,31,1.817,33,1.817,37,1.474,40,1.994,43,1.474,44,1.817,45,1.636,64,1.26,67,2.024,90,2.824,114,1.56,161,0.047,162,0.06,163,0.047,176,1.636,190,2.248,301,2.024,365,1.558,366,2.543,369,2.543,377,0.505,389,1.958,390,2.824,391,2.564,392,3.331,393,2.564,394,2.543,395,4.16,396,2.564,397,3.331,398,3.331,399,3.331,400,3.916,401,3.331,402,2.564,403,2.564,404,3.331,405,2.564,406,2.564,407,2.564,408,2.564,409,2.564,410,2.564,411,2.564,412,2.564,413,3.699,414,3.331,415,2.564,416,2.564,417,3.331,418,1.958,419,2.564,420,3.699,421,2.564,422,2.564]],["title/index.html",[8,0.393,423,1.996,424,1.996]],["body/index.html",[10,2.128,11,1.505,26,1.287,27,0.969,28,1.821,30,0.084,37,1.399,43,0.785,50,2.583,59,2.069,66,1.11,68,1.11,77,1.198,88,0.785,89,1.694,93,1.505,114,1.11,121,1.369,123,1.11,126,1.198,161,0.036,162,0.059,163,0.036,165,1.505,176,0.969,248,1.588,250,1.505,265,2.128,288,1.505,325,1.505,345,3.084,382,1.505,394,2.682,418,2.468,425,1.972,426,1.972,427,1.972,428,1.972,429,1.972,430,1.972,431,2.787,432,2.787,433,1.972,434,1.972,435,1.972,436,1.972,437,1.972,438,2.787,439,1.972,440,1.972,441,1.972,442,1.972,443,1.972,444,1.972,445,1.972,446,1.972,447,1.972,448,1.972,449,1.972,450,1.972,451,4.039,452,1.972,453,3.019,454,1.972,455,4.039,456,1.972,457,3.847,458,3.232,459,2.787,460,2.787,461,2.787,462,1.972,463,3.706,464,3.232,465,3.232,466,2.787,467,3.706,468,1.972,469,1.972,470,1.972,471,1.972,472,1.972,473,2.787,474,1.972,475,1.972,476,1.972,477,1.972,478,1.972,479,1.972,480,1.972,481,1.972,482,1.972,483,1.972,484,2.787,485,2.787,486,1.972,487,1.972,488,1.972]],["title/modules.html",[489,2.402]],["body/modules.html",[30,0.074,161,0.065,162,0.074,163,0.065,489,2.73]],["title/overview.html",[490,2.402]],["body/overview.html",[2,1.746,30,0.074,161,0.065,162,0.074,163,0.065,453,2.714,490,2.714]],["title/miscellaneous/typealiases.html",[377,0.393,491,2.811]],["body/miscellaneous/typealiases.html",[8,0.667,30,0.072,32,1.345,41,1.944,73,2.404,83,1.665,95,2.404,161,0.062,162,0.072,163,0.062,270,3.021,377,0.667,379,3.199,380,2.588,492,3.39]],["title/miscellaneous/variables.html",[377,0.393,493,2.146]],["body/miscellaneous/variables.html",[8,0.673,30,0.081,32,1.098,41,1.68,88,1.362,89,1.362,98,1.954,123,1.362,161,0.062,162,0.072,163,0.062,365,2.078,377,0.673,390,2.61,493,2.61]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":68,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["0/1",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":345,"title":{},"body":{"classes/RadixTree.html":{},"index.html":{}}}],["1/1",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":451,"title":{},"body":{"index.html":{}}}],["2.1.0",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":453,"title":{},"body":{"index.html":{},"overview.html":{}}}],["3/9",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":455,"title":{},"body":{"index.html":{}}}],["5",{"_index":457,"title":{},"body":{"index.html":{}}}],["58",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":463,"title":{},"body":{"index.html":{}}}],["66",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":467,"title":{},"body":{"index.html":{}}}],["7/12",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["8/12",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":474,"title":{},"body":{"index.html":{}}}],["_delete",{"_index":251,"title":{},"body":{"classes/RadixTree.html":{}}}],["_delete(k",{"_index":261,"title":{},"body":{"classes/RadixTree.html":{}}}],["_get",{"_index":252,"title":{},"body":{"classes/RadixTree.html":{}}}],["_get(fullkey",{"_index":264,"title":{},"body":{"classes/RadixTree.html":{}}}],["_getsearchroot",{"_index":253,"title":{},"body":{"classes/RadixTree.html":{}}}],["_getsearchroot(k",{"_index":268,"title":{},"body":{"classes/RadixTree.html":{}}}],["_set",{"_index":254,"title":{},"body":{"classes/RadixTree.html":{}}}],["_set(k",{"_index":271,"title":{},"body":{"classes/RadixTree.html":{}}}],["_subtreetraversebfs",{"_index":14,"title":{},"body":{"classes/RadixNode.html":{}}}],["_subtreetraversebfs(prefix",{"_index":39,"title":{},"body":{"classes/RadixNode.html":{}}}],["_subtreetraversedfs",{"_index":15,"title":{},"body":{"classes/RadixNode.html":{}}}],["_subtreetraversedfs(depth",{"_index":46,"title":{},"body":{"classes/RadixNode.html":{}}}],["aaa",{"_index":192,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["ab",{"_index":293,"title":{},"body":{"classes/RadixTree.html":{}}}],["abc",{"_index":295,"title":{},"body":{"classes/RadixTree.html":{}}}],["abcd",{"_index":294,"title":{},"body":{"classes/RadixTree.html":{}}}],["above",{"_index":472,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":185,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["act",{"_index":65,"title":{},"body":{"classes/RadixNode.html":{}}}],["add",{"_index":54,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["added",{"_index":205,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["addprefixtochild",{"_index":16,"title":{},"body":{"classes/RadixNode.html":{}}}],["addprefixtochild(prefix",{"_index":51,"title":{},"body":{"classes/RadixNode.html":{}}}],["aliases",{"_index":492,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allnodes",{"_index":265,"title":{},"body":{"classes/RadixTree.html":{},"index.html":{}}}],["allnodes||false",{"_index":316,"title":{},"body":{"classes/RadixTree.html":{}}}],["array",{"_index":22,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["ascending",{"_index":407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":300,"title":{},"body":{"classes/RadixTree.html":{}}}],["associated",{"_index":212,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["association",{"_index":220,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["autocomplete",{"_index":444,"title":{},"body":{"index.html":{}}}],["b",{"_index":10,"title":{},"body":{"classes/RadixNode.html":{},"index.html":{}}}],["bbb",{"_index":193,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["behavior",{"_index":284,"title":{},"body":{"classes/RadixTree.html":{}}}],["behaviour",{"_index":93,"title":{},"body":{"classes/RadixNode.html":{},"index.html":{}}}],["between",{"_index":56,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{}}}],["boolean",{"_index":20,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["breadfirst",{"_index":383,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["breadth",{"_index":440,"title":{},"body":{"index.html":{}}}],["breadth_first",{"_index":384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["c",{"_index":11,"title":{},"body":{"classes/RadixNode.html":{},"index.html":{}}}],["character",{"_index":172,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["check",{"_index":215,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["child",{"_index":52,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["child.startswith(prefix",{"_index":69,"title":{},"body":{"classes/RadixNode.html":{}}}],["childkey",{"_index":346,"title":{},"body":{"classes/RadixTree.html":{}}}],["childnode",{"_index":115,"title":{},"body":{"classes/RadixNode.html":{}}}],["children",{"_index":107,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["choice",{"_index":442,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"overview.html":{}}}],["clean",{"_index":427,"title":{},"body":{"index.html":{}}}],["comes",{"_index":433,"title":{},"body":{"index.html":{}}}],["config",{"_index":72,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["config.allnodes",{"_index":324,"title":{},"body":{"classes/RadixTree.html":{}}}],["config.pruner",{"_index":122,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["config.searchtype",{"_index":125,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["configuration",{"_index":92,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["console.log(s",{"_index":397,"title":{},"body":{"miscellaneous/functions.html":{}}}],["const",{"_index":114,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["constants",{"_index":96,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["constants.search_types",{"_index":323,"title":{},"body":{"classes/RadixTree.html":{}}}],["constants.searchtypes",{"_index":127,"title":{},"body":{"classes/RadixNode.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["constructor(b",{"_index":19,"title":{},"body":{"classes/RadixNode.html":{}}}],["constructor(knpairs",{"_index":187,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["constructor(kvpairs",{"_index":257,"title":{},"body":{"classes/RadixTree.html":{}}}],["containing",{"_index":296,"title":{},"body":{"classes/RadixTree.html":{}}}],["control",{"_index":84,"title":{},"body":{"classes/RadixNode.html":{}}}],["corrupt",{"_index":197,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["coverage",{"_index":355,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":25,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["creates",{"_index":469,"title":{},"body":{"index.html":{}}}],["curr",{"_index":241,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["current",{"_index":62,"title":{},"body":{"classes/RadixNode.html":{}}}],["currnode",{"_index":262,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.b",{"_index":305,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c",{"_index":318,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.delete(childkey",{"_index":348,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.entries().next().value",{"_index":347,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.findkeyhavingsharedprefix(k",{"_index":308,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.get(matchingchildkey",{"_index":354,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.get(sharedprefix",{"_index":321,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.set(k",{"_index":309,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.c.size",{"_index":344,"title":{},"body":{"classes/RadixTree.html":{}}}],["currnode.v",{"_index":306,"title":{},"body":{"classes/RadixTree.html":{}}}],["data",{"_index":431,"title":{},"body":{"index.html":{}}}],["decreasingprefixesof",{"_index":366,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decreasingprefixesof(s",{"_index":391,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":88,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultpruner",{"_index":98,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["delete",{"_index":180,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["delete(k",{"_index":195,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["dependencies",{"_index":375,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depth",{"_index":50,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"index.html":{}}}],["depth+1",{"_index":322,"title":{},"body":{"classes/RadixTree.html":{}}}],["depth_first_post_order",{"_index":388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["depth_first_pre_order",{"_index":386,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["depthfirstpostorder",{"_index":387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["depthfirstpreorder",{"_index":385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["depths",{"_index":470,"title":{},"body":{"index.html":{}}}],["deque",{"_index":100,"title":{},"body":{"classes/RadixNode.html":{}}}],["desc",{"_index":331,"title":{},"body":{"classes/RadixTree.html":{}}}],["descending",{"_index":393,"title":{},"body":{"miscellaneous/functions.html":{}}}],["description",{"_index":64,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["dfs",{"_index":481,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":429,"title":{},"body":{"index.html":{}}}],["double",{"_index":101,"title":{},"body":{"classes/RadixNode.html":{},"dependencies.html":{}}}],["each",{"_index":329,"title":{},"body":{"classes/RadixTree.html":{}}}],["edge",{"_index":216,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges",{"_index":97,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["edges.ts",{"_index":164,"title":{},"body":{"classes/RadixNodeEdges.html":{},"coverage.html":{}}}],["edges.ts:10",{"_index":194,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:11",{"_index":188,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:36",{"_index":209,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:44",{"_index":211,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:51",{"_index":219,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:62",{"_index":196,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:78",{"_index":214,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:83",{"_index":223,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:89",{"_index":201,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:94",{"_index":217,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges.ts:99",{"_index":221,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["edges:node.c",{"_index":149,"title":{},"body":{"classes/RadixNode.html":{}}}],["edges:this.c",{"_index":157,"title":{},"body":{"classes/RadixNode.html":{}}}],["elements",{"_index":224,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["ended",{"_index":102,"title":{},"body":{"classes/RadixNode.html":{},"dependencies.html":{}}}],["entered",{"_index":405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enters",{"_index":410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entries",{"_index":181,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["enumerations",{"_index":378,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equivalently",{"_index":449,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":290,"title":{},"body":{"classes/RadixTree.html":{}}}],["example",{"_index":190,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["examples",{"_index":445,"title":{},"body":{"index.html":{}}}],["existing",{"_index":57,"title":{},"body":{"classes/RadixNode.html":{}}}],["export",{"_index":104,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["extraprefix",{"_index":336,"title":{},"body":{"classes/RadixTree.html":{}}}],["false",{"_index":109,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["fast",{"_index":426,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{}}}],["find",{"_index":174,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["findkeyhavingsharedprefix",{"_index":182,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["findkeyhavingsharedprefix(prefix",{"_index":208,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["first",{"_index":418,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["firstchartokeymap",{"_index":178,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["following",{"_index":476,"title":{},"body":{"index.html":{}}}],["found",{"_index":277,"title":{},"body":{"classes/RadixTree.html":{}}}],["fullkey",{"_index":267,"title":{},"body":{"classes/RadixTree.html":{}}}],["function",{"_index":83,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":389,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generator",{"_index":121,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"index.html":{}}}],["get(k",{"_index":210,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["getall",{"_index":255,"title":{},"body":{"classes/RadixTree.html":{}}}],["getall(prefix",{"_index":280,"title":{},"body":{"classes/RadixTree.html":{}}}],["getsearchroot",{"_index":256,"title":{},"body":{"classes/RadixTree.html":{}}}],["getsearchroot(prefix",{"_index":285,"title":{},"body":{"classes/RadixTree.html":{}}}],["getsize",{"_index":222,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["getting",{"_index":423,"title":{"index.html":{}},"body":{}}],["given",{"_index":176,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["has(k",{"_index":213,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["hasvalue",{"_index":317,"title":{},"body":{"classes/RadixTree.html":{}}}],["hasvalue:node.b",{"_index":147,"title":{},"body":{"classes/RadixNode.html":{}}}],["hasvalue:this.b",{"_index":155,"title":{},"body":{"classes/RadixNode.html":{}}}],["having",{"_index":327,"title":{},"body":{"classes/RadixTree.html":{}}}],["hold",{"_index":105,"title":{},"body":{"classes/RadixNode.html":{}}}],["holds",{"_index":106,"title":{},"body":{"classes/RadixNode.html":{}}}],["hooks",{"_index":435,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":430,"title":{},"body":{"index.html":{}}}],["implementing",{"_index":443,"title":{},"body":{"index.html":{}}}],["import",{"_index":94,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["include",{"_index":325,"title":{},"body":{"classes/RadixTree.html":{},"index.html":{}}}],["increasingprefixesof",{"_index":369,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["increasingprefixesof(s",{"_index":406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["initialize",{"_index":260,"title":{},"body":{"classes/RadixTree.html":{}}}],["insert",{"_index":299,"title":{},"body":{"classes/RadixTree.html":{}}}],["inserted",{"_index":218,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["intermediary",{"_index":55,"title":{},"body":{"classes/RadixNode.html":{}}}],["intermediary's",{"_index":61,"title":{},"body":{"classes/RadixNode.html":{}}}],["invariant",{"_index":169,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["iterableiterator",{"_index":45,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["iterate",{"_index":75,"title":{},"body":{"classes/RadixNode.html":{}}}],["k",{"_index":200,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["k,child",{"_index":150,"title":{},"body":{"classes/RadixNode.html":{}}}],["k,node",{"_index":158,"title":{},"body":{"classes/RadixNode.html":{}}}],["k,v",{"_index":274,"title":{},"body":{"classes/RadixTree.html":{}}}],["k.length",{"_index":303,"title":{},"body":{"classes/RadixTree.html":{}}}],["k.slice(matchingchildkey.length",{"_index":353,"title":{},"body":{"classes/RadixTree.html":{}}}],["k.slice(sharedprefix.length",{"_index":320,"title":{},"body":{"classes/RadixTree.html":{}}}],["k.startswith(prefix",{"_index":283,"title":{},"body":{"classes/RadixTree.html":{}}}],["keep",{"_index":124,"title":{},"body":{"classes/RadixNode.html":{}}}],["key",{"_index":59,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"index.html":{}}}],["key:prefix",{"_index":146,"title":{},"body":{"classes/RadixNode.html":{}}}],["keymatch",{"_index":95,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/typealiases.html":{}}}],["keymatch.hasvalue",{"_index":339,"title":{},"body":{"classes/RadixTree.html":{}}}],["keymatch|undefined",{"_index":314,"title":{},"body":{"classes/RadixTree.html":{}}}],["keys",{"_index":183,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["knpairs",{"_index":189,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["knpairs.foreach(([k,n",{"_index":228,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["kvpairs",{"_index":259,"title":{},"body":{"classes/RadixTree.html":{}}}],["length",{"_index":67,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["list",{"_index":199,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["literal",{"_index":73,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/typealiases.html":{}}}],["longer",{"_index":292,"title":{},"body":{"classes/RadixTree.html":{}}}],["longest",{"_index":414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["longestsharedprefix",{"_index":301,"title":{},"body":{"classes/RadixTree.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["longestsharedprefix(matchingchildkey",{"_index":312,"title":{},"body":{"classes/RadixTree.html":{}}}],["longestsharedprefix(s1",{"_index":412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["look",{"_index":279,"title":{},"body":{"classes/RadixTree.html":{}}}],["loop",{"_index":403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loops",{"_index":411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["m",{"_index":179,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["maintains",{"_index":167,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["map",{"_index":166,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["marked",{"_index":471,"title":{},"body":{"index.html":{}}}],["matches",{"_index":289,"title":{},"body":{"classes/RadixTree.html":{}}}],["matching",{"_index":162,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchingchildkey",{"_index":307,"title":{},"body":{"classes/RadixTree.html":{}}}],["means",{"_index":173,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["miscellaneous",{"_index":377,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":489,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["n",{"_index":230,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":63,"title":{},"body":{"classes/RadixNode.html":{}}}],["never",{"_index":404,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":66,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"index.html":{}}}],["newchildkey",{"_index":350,"title":{},"body":{"classes/RadixTree.html":{}}}],["newchildnode",{"_index":118,"title":{},"body":{"classes/RadixNode.html":{}}}],["newchildnode.c.set(child.slice(prefix.length",{"_index":119,"title":{},"body":{"classes/RadixNode.html":{}}}],["next",{"_index":136,"title":{},"body":{"classes/RadixNode.html":{}}}],["next.dequeue",{"_index":139,"title":{},"body":{"classes/RadixNode.html":{}}}],["next.enqueue([0",{"_index":137,"title":{},"body":{"classes/RadixNode.html":{}}}],["next.enqueue([depth+1",{"_index":153,"title":{},"body":{"classes/RadixNode.html":{}}}],["next.isempty",{"_index":138,"title":{},"body":{"classes/RadixNode.html":{}}}],["node",{"_index":26,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"index.html":{}}}],["node._subtreetraversedfs(depth+1",{"_index":160,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.b",{"_index":143,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.c",{"_index":145,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.c.entries",{"_index":151,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts",{"_index":7,"title":{},"body":{"classes/RadixNode.html":{},"coverage.html":{}}}],["node.ts:27",{"_index":53,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts:48",{"_index":74,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts:64",{"_index":42,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts:7",{"_index":35,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts:8",{"_index":38,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts:87",{"_index":49,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.ts:9",{"_index":24,"title":{},"body":{"classes/RadixNode.html":{}}}],["node.v",{"_index":144,"title":{},"body":{"classes/RadixNode.html":{}}}],["nodes",{"_index":77,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"index.html":{}}}],["note",{"_index":332,"title":{},"body":{"classes/RadixTree.html":{}}}],["notice",{"_index":482,"title":{},"body":{"index.html":{}}}],["now",{"_index":475,"title":{},"body":{"index.html":{}}}],["number",{"_index":47,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["o(1",{"_index":177,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["object",{"_index":282,"title":{},"body":{"classes/RadixTree.html":{}}}],["objects",{"_index":326,"title":{},"body":{"classes/RadixTree.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":394,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["over",{"_index":76,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{}}}],["overview",{"_index":490,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":374,"title":{"dependencies.html":{}},"body":{}}],["pair",{"_index":275,"title":{},"body":{"classes/RadixTree.html":{}}}],["pairs",{"_index":202,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["param",{"_index":113,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["parameter",{"_index":87,"title":{},"body":{"classes/RadixNode.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":342,"title":{},"body":{"classes/RadixTree.html":{}}}],["parent.c.delete(parentkey",{"_index":349,"title":{},"body":{"classes/RadixTree.html":{}}}],["parent.c.set(newchildkey",{"_index":351,"title":{},"body":{"classes/RadixTree.html":{}}}],["parentkey",{"_index":343,"title":{},"body":{"classes/RadixTree.html":{}}}],["particular",{"_index":171,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["performant",{"_index":441,"title":{},"body":{"index.html":{}}}],["post",{"_index":439,"title":{},"body":{"index.html":{}}}],["pre",{"_index":438,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":43,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["prefix+k",{"_index":154,"title":{},"body":{"classes/RadixNode.html":{}}}],["prefixes",{"_index":392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prenotpost",{"_index":48,"title":{},"body":{"classes/RadixNode.html":{}}}],["prints",{"_index":398,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["property",{"_index":333,"title":{},"body":{"classes/RadixTree.html":{}}}],["provided",{"_index":82,"title":{},"body":{"classes/RadixNode.html":{}}}],["prune",{"_index":80,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["pruner",{"_index":41,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["pruner(depth",{"_index":142,"title":{},"body":{"classes/RadixNode.html":{}}}],["queue",{"_index":103,"title":{},"body":{"classes/RadixNode.html":{},"dependencies.html":{}}}],["quot;&quot",{"_index":422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["quot;a&quot",{"_index":401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["quot;ab&quot",{"_index":400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["quot;abc&quot",{"_index":399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["quot;xx&quot",{"_index":421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["radix",{"_index":27,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"index.html":{}}}],["radixnode",{"_index":1,"title":{"classes/RadixNode.html":{}},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{}}}],["radixnode(true",{"_index":310,"title":{},"body":{"classes/RadixTree.html":{}}}],["radixnodeedges",{"_index":36,"title":{"classes/RadixNodeEdges.html":{}},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"coverage.html":{}}}],["radixnodeedges(c",{"_index":112,"title":{},"body":{"classes/RadixNode.html":{}}}],["radixnodes",{"_index":225,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["radixtree",{"_index":248,"title":{"classes/RadixTree.html":{}},"body":{"classes/RadixTree.html":{},"coverage.html":{},"index.html":{}}}],["random",{"_index":488,"title":{},"body":{"index.html":{}}}],["relative",{"_index":334,"title":{},"body":{"classes/RadixTree.html":{}}}],["require('xradix",{"_index":446,"title":{},"body":{"index.html":{}}}],["result",{"_index":161,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":163,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":232,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["returned",{"_index":91,"title":{},"body":{"classes/RadixNode.html":{}}}],["returns",{"_index":44,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["rne",{"_index":191,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["root",{"_index":250,"title":{},"body":{"classes/RadixTree.html":{},"index.html":{}}}],["rooted",{"_index":79,"title":{},"body":{"classes/RadixNode.html":{}}}],["rt",{"_index":447,"title":{},"body":{"index.html":{}}}],["rt.get(\"not",{"_index":479,"title":{},"body":{"index.html":{}}}],["rt.get(\"xxcx\").depth",{"_index":478,"title":{},"body":{"index.html":{}}}],["rt.get(\"xxcx\").value",{"_index":477,"title":{},"body":{"index.html":{}}}],["rt.get(\"xxcxx",{"_index":484,"title":{},"body":{"index.html":{}}}],["rt.getall",{"_index":480,"title":{},"body":{"index.html":{}}}],["rt.getall(\"xxcxx",{"_index":486,"title":{},"body":{"index.html":{}}}],["rt.set(\"xx",{"_index":448,"title":{},"body":{"index.html":{}}}],["rt.set(\"xxa",{"_index":450,"title":{},"body":{"index.html":{}}}],["rt.set(\"xxb",{"_index":452,"title":{},"body":{"index.html":{}}}],["rt.set(\"xxc",{"_index":454,"title":{},"body":{"index.html":{}}}],["rt.set(\"xxcx",{"_index":468,"title":{},"body":{"index.html":{}}}],["rt.set(\"xxcxxa",{"_index":456,"title":{},"body":{"index.html":{}}}],["rt.set(\"xxcxxb",{"_index":462,"title":{},"body":{"index.html":{}}}],["s",{"_index":395,"title":{},"body":{"miscellaneous/functions.html":{}}}],["s1",{"_index":417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["s2",{"_index":413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["same",{"_index":203,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["search",{"_index":85,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["searchroot",{"_index":297,"title":{},"body":{"classes/RadixTree.html":{}}}],["searchroot.subtreetraverse(searchrootprefix",{"_index":338,"title":{},"body":{"classes/RadixTree.html":{}}}],["searchrootmatch",{"_index":270,"title":{},"body":{"classes/RadixTree.html":{},"miscellaneous/typealiases.html":{}}}],["searchrootmatch|undefined",{"_index":340,"title":{},"body":{"classes/RadixTree.html":{}}}],["searchrootprefix",{"_index":337,"title":{},"body":{"classes/RadixTree.html":{}}}],["searchtype",{"_index":86,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/enumerations.html":{}}}],["searchtype.breadfirst",{"_index":129,"title":{},"body":{"classes/RadixNode.html":{}}}],["searchtype.depthfirstpostorder",{"_index":128,"title":{},"body":{"classes/RadixNode.html":{}}}],["searchtype.depthfirstpreorder",{"_index":132,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["second",{"_index":419,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":135,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["set(k",{"_index":207,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["shallowest",{"_index":287,"title":{},"body":{"classes/RadixTree.html":{}}}],["shared",{"_index":90,"title":{},"body":{"classes/RadixNode.html":{},"miscellaneous/functions.html":{}}}],["sharedprefix",{"_index":311,"title":{},"body":{"classes/RadixTree.html":{}}}],["sharedprefix.length",{"_index":313,"title":{},"body":{"classes/RadixTree.html":{}}}],["shares",{"_index":175,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["shortest",{"_index":291,"title":{},"body":{"classes/RadixTree.html":{}}}],["sibling",{"_index":487,"title":{},"body":{"index.html":{}}}],["simple",{"_index":165,"title":{},"body":{"classes/RadixNodeEdges.html":{},"index.html":{}}}],["single",{"_index":168,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["size",{"_index":186,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["skipped",{"_index":483,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["special",{"_index":434,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":379,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":390,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/constants.ts",{"_index":380,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/radix",{"_index":6,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{}}}],["src/utils.ts",{"_index":365,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":170,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["started",{"_index":424,"title":{"index.html":{}},"body":{}}],["starting",{"_index":437,"title":{},"body":{"index.html":{}}}],["starts",{"_index":330,"title":{},"body":{"classes/RadixTree.html":{}}}],["state",{"_index":198,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["statements",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":40,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{}}}],["strings",{"_index":416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string|undefined",{"_index":231,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["structure",{"_index":432,"title":{},"body":{"index.html":{}}}],["subtree",{"_index":78,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["subtreetraverse",{"_index":17,"title":{},"body":{"classes/RadixNode.html":{}}}],["subtreetraverse(prefix",{"_index":71,"title":{},"body":{"classes/RadixNode.html":{}}}],["success",{"_index":276,"title":{},"body":{"classes/RadixTree.html":{}}}],["t",{"_index":21,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["table",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["tested",{"_index":428,"title":{},"body":{"index.html":{}}}],["this._delete",{"_index":352,"title":{},"body":{"classes/RadixTree.html":{}}}],["this._get",{"_index":319,"title":{},"body":{"classes/RadixTree.html":{}}}],["this._get(k",{"_index":315,"title":{},"body":{"classes/RadixTree.html":{}}}],["this._getsearchroot(prefix",{"_index":341,"title":{},"body":{"classes/RadixTree.html":{}}}],["this._set(k",{"_index":304,"title":{},"body":{"classes/RadixTree.html":{}}}],["this._subtreetraversebfs(prefix",{"_index":131,"title":{},"body":{"classes/RadixNode.html":{}}}],["this._subtreetraversedfs(0",{"_index":133,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.b",{"_index":108,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.c",{"_index":111,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.c.delete(child",{"_index":117,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.c.entries",{"_index":159,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.c.get(child",{"_index":116,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.c.set(prefix",{"_index":120,"title":{},"body":{"classes/RadixNode.html":{}}}],["this.firstchartokeymap",{"_index":227,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.firstchartokeymap.delete(k[0",{"_index":243,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.firstchartokeymap.get(k[0",{"_index":237,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.firstchartokeymap.get(prefix[0",{"_index":233,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.firstchartokeymap.has(k[0",{"_index":235,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.firstchartokeymap.set(k[0",{"_index":238,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.getsearchroot(prefix",{"_index":335,"title":{},"body":{"classes/RadixTree.html":{}}}],["this.m",{"_index":226,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.delete",{"_index":236,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.delete(k",{"_index":242,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.entries",{"_index":245,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.get(k",{"_index":234,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.has(k",{"_index":240,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.keys",{"_index":246,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.set(k",{"_index":239,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.size",{"_index":244,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.m.values",{"_index":247,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["this.root",{"_index":302,"title":{},"body":{"classes/RadixTree.html":{}}}],["this.set(k",{"_index":229,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["this.v",{"_index":110,"title":{},"body":{"classes/RadixNode.html":{}}}],["those",{"_index":204,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["traversal",{"_index":126,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"index.html":{}}}],["traversals",{"_index":382,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["tree",{"_index":28,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["tree.ts",{"_index":249,"title":{},"body":{"classes/RadixTree.html":{},"coverage.html":{}}}],["tree.ts:107",{"_index":281,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:138",{"_index":286,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:142",{"_index":269,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:170",{"_index":273,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:182",{"_index":263,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:32",{"_index":298,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:38",{"_index":272,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:64",{"_index":278,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:70",{"_index":266,"title":{},"body":{"classes/RadixTree.html":{}}}],["tree.ts:9",{"_index":258,"title":{},"body":{"classes/RadixTree.html":{}}}],["true",{"_index":123,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":491,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":381,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":37,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["update",{"_index":60,"title":{},"body":{"classes/RadixNode.html":{}}}],["use",{"_index":58,"title":{},"body":{"classes/RadixNode.html":{}}}],["using",{"_index":81,"title":{},"body":{"classes/RadixNode.html":{}}}],["utils",{"_index":99,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{}}}],["utils.decreasingprefixesof(&quot;&quot",{"_index":402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils.decreasingprefixesof(&quot;abc&quot",{"_index":396,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils.increasingprefixesof(&quot;&quot",{"_index":409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils.increasingprefixesof(&quot;abc&quot",{"_index":408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils.longestsharedprefix(&quot;abc&quot",{"_index":420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["v",{"_index":12,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["value",{"_index":89,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixTree.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value:node.v",{"_index":148,"title":{},"body":{"classes/RadixNode.html":{}}}],["value:this.v",{"_index":156,"title":{},"body":{"classes/RadixNode.html":{}}}],["values",{"_index":184,"title":{},"body":{"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["variable",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":493,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":436,"title":{},"body":{"index.html":{}}}],["via",{"_index":206,"title":{},"body":{"classes/RadixNodeEdges.html":{}}}],["visited",{"_index":134,"title":{},"body":{"classes/RadixNode.html":{}}}],["visited.add(node",{"_index":141,"title":{},"body":{"classes/RadixNode.html":{}}}],["visited.has(child",{"_index":152,"title":{},"body":{"classes/RadixNode.html":{}}}],["visited.has(node",{"_index":140,"title":{},"body":{"classes/RadixNode.html":{}}}],["void",{"_index":70,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["whose",{"_index":288,"title":{},"body":{"classes/RadixTree.html":{},"index.html":{}}}],["x",{"_index":473,"title":{},"body":{"index.html":{}}}],["xradix",{"_index":425,"title":{},"body":{"index.html":{}}}],["xx",{"_index":458,"title":{},"body":{"index.html":{}}}],["xxa",{"_index":459,"title":{},"body":{"index.html":{}}}],["xxb",{"_index":460,"title":{},"body":{"index.html":{}}}],["xxc",{"_index":461,"title":{},"body":{"index.html":{}}}],["xxcx",{"_index":466,"title":{},"body":{"index.html":{}}}],["xxcxx",{"_index":485,"title":{},"body":{"index.html":{}}}],["xxcxxa",{"_index":464,"title":{},"body":{"index.html":{}}}],["xxcxxb",{"_index":465,"title":{},"body":{"index.html":{}}}],["yes",{"_index":34,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["yield",{"_index":130,"title":{},"body":{"classes/RadixNode.html":{},"classes/RadixNodeEdges.html":{},"classes/RadixTree.html":{}}}],["yields",{"_index":328,"title":{},"body":{"classes/RadixTree.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/RadixNode.html":{"url":"classes/RadixNode.html","title":"class - RadixNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadixNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/radix-node.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                b\n                            \n                            \n                                c\n                            \n                            \n                                v\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _subtreeTraverseBfs\n                            \n                            \n                                _subtreeTraverseDfs\n                            \n                            \n                                addPrefixToChild\n                            \n                            \n                                subtreeTraverse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(b?: boolean, v?: T, c?: Array<>)\n                    \n                \n                        \n                            \n                                Defined in src/radix-node.ts:9\n                            \n                        \n\n                \n                    \n                            Create node in the Radix Tree.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        b\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        v\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        c\n                                                  \n                                                        \n                                                                    Array<>\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            b\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/radix-node.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            c\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RadixNodeEdges\n\n                        \n                    \n                        \n                            \n                                    Defined in src/radix-node.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            v\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in src/radix-node.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _subtreeTraverseBfs\n                        \n                        \n                    \n                \n            \n            \n                \n_subtreeTraverseBfs(prefix: string, pruner: Pruner)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pruner\n                                    \n                                                Pruner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IterableIterator>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _subtreeTraverseDfs\n                        \n                        \n                    \n                \n            \n            \n                \n_subtreeTraverseDfs(depth: number, prefix: string, pruner: Pruner, preNotPost: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    depth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pruner\n                                    \n                                                Pruner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    preNotPost\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IterableIterator>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPrefixToChild\n                        \n                        \n                    \n                \n            \n            \n                \naddPrefixToChild(prefix: string, child: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node.ts:27\n                \n            \n\n\n            \n                \n                    Add intermediary node between this node and existing child. Use prefix as key to intermediary, and\nupdate intermediary's key to current child as needed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe prefix of child to act as key to new intermediary node. length > 0\n\n\n                                    \n                                \n                                \n                                    child\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe existing child key. length > 0 and child.startsWith(prefix)\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            subtreeTraverse\n                        \n                        \n                    \n                \n            \n            \n                \nsubtreeTraverse(prefix?: string, config: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node.ts:48\n                \n            \n\n\n            \n                \n                    Iterate over all nodes of subtree rooted at this node. Prune the subtree using the provided pruner function.\nControl the search type with the searchType parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nthe prefix shared by all nodes returned\n\n\n                                    \n                                \n                                \n                                    config\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        \nthe configuration of the behaviour of the function\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IterableIterator>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SearchType, Pruner, KeyMatch } from \"./constants\";\nimport RadixNodeEdges from \"./radix-node-edges\";\nimport { defaultPruner } from \"./utils\";\nimport Deque from \"double-ended-queue\";\n\nexport default class RadixNode {\n  b: boolean; // does this node hold a value\n  v: T | undefined; // the value this node holds\n  c: RadixNodeEdges; // edges to children\n\n  /**\n   * Create node in the Radix Tree.\n   */\n  constructor(b?: boolean, v?: T, c?: Array]>) {\n    this.b = b || false;\n    this.v = v;\n    this.c = new RadixNodeEdges(c);\n  }\n\n  /**\n   * Add intermediary node between this node and existing child. Use prefix as key to intermediary, and\n   * update intermediary's key to current child as needed.\n   *\n   * @param prefix - the prefix of child to act as key to new intermediary node. length > 0\n   * @param child  - the existing child key. length > 0 and child.startsWith(prefix)\n   */\n  addPrefixToChild(prefix: string, child: string) {\n    const childNode = this.c.get(child);\n    this.c.delete(child);\n\n    const newChildNode = new RadixNode();\n    newChildNode.c.set(child.slice(prefix.length), childNode);\n\n    this.c.set(prefix, newChildNode);\n  }\n\n  /**\n   * Iterate over all nodes of subtree rooted at this node. Prune the subtree using the provided pruner function.\n   * Control the search type with the searchType parameter.\n   *\n   * @generator\n   *\n   * @param prefix            - the prefix shared by all nodes returned\n   * @param config            - the configuration of the behaviour of the function\n   * @param config.pruner     - prune nodes tree using this function. false to prune, true to keep\n   * @param config.searchType - the type of tree traversal to do. Must be in constants.SearchTypes\n   */\n  *subtreeTraverse(\n      prefix?: string,\n      config: {pruner?: Pruner, searchType?: SearchType}={}\n  ): IterableIterator> {\n    prefix = prefix || \"\";\n    const pruner = config.pruner || defaultPruner;\n    const searchType = config.searchType || SearchType.DepthFirstPostorder;\n\n    if (searchType === SearchType.BreadFirst) {\n      yield* this._subtreeTraverseBfs(prefix, pruner);\n    } else {\n      const preNotPost = searchType === SearchType.DepthFirstPreorder;\n      yield* this._subtreeTraverseDfs(0, prefix, pruner, preNotPost);\n    }\n  }\n\n  *_subtreeTraverseBfs(prefix: string, pruner: Pruner): IterableIterator> {\n    const visited = new Set();\n    const next = new Deque]>();\n    next.enqueue([0, prefix, this])\n\n    while (!next.isEmpty()) {\n      const [depth, prefix, node] = next.dequeue()\n      if (!visited.has(node)) {\n        visited.add(node);\n\n        if (pruner(depth, prefix, node.b, node.v, node.c)) {\n          yield {depth, key:prefix, hasValue:node.b, value:node.v, edges:node.c};\n\n          for (const [k,child] of node.c.entries()) {\n            if (!visited.has(child)) {\n              next.enqueue([depth+1, prefix+k, child]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  *_subtreeTraverseDfs(depth: number, prefix: string, pruner: Pruner, preNotPost: boolean): IterableIterator> {\n    if (pruner(depth, prefix, this.b, this.v, this.c)) {\n      if (preNotPost) {\n        yield {depth, key:prefix, hasValue:this.b, value:this.v, edges:this.c};\n      }\n\n      for (const [k,node] of this.c.entries()) {\n        yield* node._subtreeTraverseDfs(depth+1, prefix+k, pruner, preNotPost);\n      }\n\n      if (!preNotPost) {\n        yield {depth, key:prefix, hasValue:this.b, value:this.v, edges:this.c};\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadixNodeEdges.html":{"url":"classes/RadixNodeEdges.html","title":"class - RadixNodeEdges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadixNodeEdges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/radix-node-edges.ts\n        \n\n            \n                Description\n            \n            \n                A simple Map, but also maintains a single invariant:\n\nOnly a single key can start with a particular character\n\nThis invariant means that we can find the key that shares a prefix with a given string in O(1).\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstCharToKeyMap\n                            \n                            \n                                m\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                entries\n                            \n                            \n                                findKeyHavingSharedPrefix\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                keys\n                            \n                            \n                                set\n                            \n                            \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(knpairs?: Array<>)\n                    \n                \n                        \n                            \n                                Defined in src/radix-node-edges.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        knpairs\n                                                  \n                                                        \n                                                                    Array<>\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            const rne = new RadixNodeEdges([\n[\"aaa\", new RadixNode()],\n[\"bbb\", new RadixNode()]\n]);\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstCharToKeyMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in src/radix-node-edges.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            m\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/radix-node-edges.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(k: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:62\n                \n            \n\n\n            \n                \n                    Delete a key from this RadixNodeEdges. Cannot corrupt the state of the edges list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            entries\n                        \n                        \n                    \n                \n            \n            \n                \nentries()\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:89\n                \n            \n\n\n            \n                \n                    A generator over all [key, node] pairs in the map. Returns pairs of values of the same type as those\nthat were added to the map via set(k, v)\n\n\n                    \n                        Returns :     IterableIterator<>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findKeyHavingSharedPrefix\n                        \n                        \n                    \n                \n            \n            \n                \nfindKeyHavingSharedPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        either the matching key or undefined if no matching key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(k: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:44\n                \n            \n\n\n            \n                \n                    Get the RadixNode associated to a key k\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RadixNode\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            has\n                        \n                        \n                    \n                \n            \n            \n                \nhas(k: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:78\n                \n            \n\n\n            \n                \n                    Check if a there are is an edge associated to a particular key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keys\n                        \n                        \n                    \n                \n            \n            \n                \nkeys()\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:94\n                \n            \n\n\n            \n                \n                    A generator over all keys inserted into the map via set(k, v)\n\n\n                    \n                        Returns :     IterableIterator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(k: string, v: RadixNode)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:51\n                \n            \n\n\n            \n                \n                    Set an association between a key k and a RadixNode\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    v\n                                    \n                                                RadixNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n            \n                \n                    Defined in src/radix-node-edges.ts:99\n                \n            \n\n\n            \n                \n                    A generator over all values inserted into the map via set(k, v)\n\n\n                    \n                        Returns :         IterableIterator>\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/radix-node-edges.ts:83\n                                \n                            \n                    \n                        \n                                get the number of elements (edges to other RadixNodes) in the map\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import RadixNode from \"./radix-node\";\n\n/**\n * A simple Map, but also maintains a single invariant:\n *  - Only a single key can start with a particular character\n *\n * This invariant means that we can find the key that shares a prefix with a given string in O(1).\n */\nexport default class RadixNodeEdges {\n  m: Map>;\n  firstCharToKeyMap: Map;\n\n  /**\n   * @example\n   * const rne = new RadixNodeEdges([\n   *   [\"aaa\", new RadixNode()],\n   *   [\"bbb\", new RadixNode()]\n   * ]);\n   */\n  constructor(knpairs?: Array]>) {\n    this.m = new Map(); //                {string -> RadixNode}\n    this.firstCharToKeyMap = new Map() // {string -> string}\n\n    if (knpairs) {\n      knpairs.forEach(([k,n]) => {\n        this.set(k, n)\n      });\n    }\n  }\n\n  /**\n   * @param prefix\n   *\n   * @returns either the matching key or undefined if no matching key\n   */\n  findKeyHavingSharedPrefix(prefix: string): string|undefined {\n    return this.firstCharToKeyMap.get(prefix[0]);\n  }\n\n\n  /**\n   * Get the RadixNode associated to a key k\n   */\n  get(k: string): RadixNode {\n    return this.m.get(k);\n  }\n\n  /**\n   * Set an association between a key k and a RadixNode\n   */\n  set(k: string, v: RadixNode) {\n    if (this.firstCharToKeyMap.has(k[0])) {\n      this.m.delete( this.firstCharToKeyMap.get(k[0]) );\n    }\n    this.firstCharToKeyMap.set(k[0], k);\n    this.m.set(k, v);\n  }\n\n  /**\n   * Delete a key from this RadixNodeEdges. Cannot corrupt the state of the edges list.\n   */\n  delete(k: string): boolean {\n    if (this.m.has(k) && this.firstCharToKeyMap.has(k[0])) {\n      const curr = this.m.get(k);\n      if (this.m.delete(k)) {\n        if (this.firstCharToKeyMap.delete(k[0])) {\n          return true;\n        }\n        this.m.set(k, curr)\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a there are is an edge associated to a particular key.\n   */\n  has(k: string): boolean { return this.m.has(k); }\n\n  /**\n   * get the number of elements (edges to other RadixNodes) in the map\n   */\n  get size(): number { return this.m.size }\n\n  /**\n   * A generator over all [key, node] pairs in the map. Returns pairs of values of the same type as those\n   * that were added to the map via set(k, v)\n   */\n  *entries(): IterableIterator]> { yield* this.m.entries(); }\n\n  /**\n   * A generator over all keys inserted into the map via set(k, v)\n   */\n  *keys(): IterableIterator { yield* this.m.keys(); }\n\n  /**\n   * A generator over all values inserted into the map via set(k, v)\n   */\n  *values(): IterableIterator> { yield* this.m.values(); }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadixTree.html":{"url":"classes/RadixTree.html","title":"class - RadixTree","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadixTree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/radix-tree.ts\n        \n\n            \n                Description\n            \n            \n                The RadixTree class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _delete\n                            \n                            \n                                _get\n                            \n                            \n                                _getSearchRoot\n                            \n                            \n                                _set\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getSearchRoot\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kvpairs?: Array<>)\n                    \n                \n                        \n                            \n                                Defined in src/radix-tree.ts:9\n                            \n                        \n\n                \n                    \n                            Create a new RadixTree.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        kvpairs\n                                                  \n                                                        \n                                                                    Array<>\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                the [key, value] pairs with which to initialize the radix tree\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            root\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RadixNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/radix-tree.ts:9\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _delete\n                        \n                        \n                    \n                \n            \n            \n                \n_delete(k: string, currNode: RadixNode, undefined: [RadixNode, string])\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currNode\n                                    \n                                                RadixNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                [RadixNode, string]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _get\n                        \n                        \n                    \n                \n            \n            \n                \n_get(fullKey: string, k: string, currNode: RadixNode, depth: number, allNodes: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fullKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currNode\n                                    \n                                                RadixNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    depth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         KeyMatch | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _getSearchRoot\n                        \n                        \n                    \n                \n            \n            \n                \n_getSearchRoot(k: string, currNode: RadixNode)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currNode\n                                    \n                                                RadixNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SearchRootMatch | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _set\n                        \n                        \n                    \n                \n            \n            \n                \n_set(k: string, v: T, currNode: RadixNode)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currNode\n                                    \n                                                RadixNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(k: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:170\n                \n            \n\n\n            \n                \n                    Delete the k,v pair for the given key k from the radix tree.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the key to delete from the radix tree\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if success, false if k not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(k: string, allNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:64\n                \n            \n\n\n            \n                \n                    Return the value associated to a key in the RadixTree.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the key to look for. must have length > 0\n\n                                    \n                                \n                                \n                                    allNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         KeyMatch | undefined\n\n                    \n                    \n                        the keyMatch for the given key k. if k not found, return undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll(prefix: string, config: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:107\n                \n            \n\n\n            \n                \n                    Get the KeyMatch object for every [k,v] pair where k.startsWith(prefix).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        only return KeyMatch for keys k where k.startsWith(prefix)\n\n                                    \n                                \n                                \n                                    config\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        configuration for behavior of this function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IterableIterator>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSearchRoot\n                        \n                        \n                    \n                \n            \n            \n                \ngetSearchRoot(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:138\n                \n            \n\n\n            \n                \n                    For a given prefix, find the shallowest node in the radix tree whose key either matches the prefix exactly\nor is the shortest matching key that is longer than the prefix.\nFor example, if \"ab\" and \"abcd\" are inserted into the radix tree, the search root of the prefix \"abc\" would\nbe the node matching \"abcd\". The \"abcd\" node would be the root of the subtree containing all nodes whose keys\nstart with \"abc\", since there were no other keys that start with \"abc\" other than \"abcd\" and its children.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the prefix for which to find the searchRoot\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SearchRootMatch | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(k: string, v: T)\n                \n            \n\n\n            \n                \n                    Defined in src/radix-tree.ts:32\n                \n            \n\n\n            \n                \n                    Add a [key, value] pair to the RadixTree.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    k\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the key to insert into the radix tree. must have length > 0\n\n                                    \n                                \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the value to associate to the key in the radix tree\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import RadixNode from \"./radix-node\";\nimport { defaultPruner, longestSharedPrefix } from \"./utils\";\nimport { SearchType, Pruner, KeyMatch, SearchRootMatch } from \"./constants\";\n\n/**\n * The RadixTree class\n */\nexport default class RadixTree {\n  root: RadixNode;\n\n  /**\n   * Create a new RadixTree.\n   *\n   * @param kvpairs the [key, value] pairs with which to initialize the radix tree\n   */\n  constructor(kvpairs?: Array) {\n    this.root = new RadixNode();\n\n    if (kvpairs) {\n      for (const [k,v] of kvpairs) {\n        this.set(k, v);\n      }\n    }\n  }\n\n  /**\n   * Add a [key, value] pair to the RadixTree.\n   *\n   * @param k the key to insert into the radix tree. must have length > 0\n   * @param v the value to associate to the key in the radix tree\n   */\n  set(k: string, v: T) {\n    if (k.length > 0) {\n      this._set(k, v, this.root);\n    }\n  }\n\n  _set(k: string, v: T, currNode: RadixNode) {\n    if (k.length === 0) {\n      currNode.b = true;\n      currNode.v = v;\n    } else {\n      const matchingChildKey = currNode.c.findKeyHavingSharedPrefix(k);\n      if (!matchingChildKey) {\n        currNode.c.set(k, new RadixNode(true, v));\n      } else {\n        const sharedPrefix = longestSharedPrefix(matchingChildKey, k);\n        if (sharedPrefix.length  0\n   * @param allNodes\n   *\n   * @returns the keyMatch for the given key k. if k not found, return undefined\n   */\n  get(k: string, allNodes?: boolean): KeyMatch|undefined {\n    if (k.length > 0) {\n      return this._get(k, k, this.root, 0, allNodes||false);\n    }\n  }\n\n  _get(fullKey: string, k: string, currNode: RadixNode, depth: number, allNodes: boolean): KeyMatch|undefined {\n    if (k.length === 0) {\n      if (currNode.b || allNodes) {\n        return { depth, key: fullKey, hasValue: currNode.b, value: currNode.v, edges: currNode.c };\n      }\n    } else {\n      const matchingChildKey = currNode.c.findKeyHavingSharedPrefix(k);\n      if (matchingChildKey) {\n        const sharedPrefix = longestSharedPrefix(matchingChildKey, k);\n        if (sharedPrefix === matchingChildKey) {\n          return this._get(\n              fullKey,\n              k.slice(sharedPrefix.length),\n              currNode.c.get(sharedPrefix),\n              depth+1,\n              allNodes\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the KeyMatch object for every [k,v] pair where k.startsWith(prefix).\n   *\n   * @generator\n   *\n   * @param prefix            only return KeyMatch for keys k where k.startsWith(prefix)\n   * @param config            configuration for behavior of this function\n   * @param config.pruner     prune nodes from traversal\n   * @param config.searchType the type of tree traversal to do, must be in constants.SEARCH_TYPES\n   * @param config.allNodes   include keyMatch objects for all nodes, not just those having values\n   *\n   * @yields the KeyMatch object for each key in the RadixTree that starts with prefix\n   *\n   * @desc Note: the depth property of the KeyMatch is relative to the searchRoot of the given prefix.\n   */\n  *getAll(\n    prefix: string,\n    config: { pruner?: Pruner, searchType?: SearchType, allNodes?: boolean }={}\n  ): IterableIterator>\n  {\n    const pruner = config.pruner || defaultPruner;\n    const searchType = config.searchType || SearchType.DepthFirstPreorder;\n    const allNodes = config.allNodes || false;\n\n    const result = this.getSearchRoot(prefix);\n    if (result) {\n      const { extraPrefix, searchRoot } = result;\n      const searchRootPrefix = prefix + extraPrefix;\n      for (const keyMatch of searchRoot.subtreeTraverse(searchRootPrefix, {pruner, searchType})) {\n        if (allNodes || keyMatch.hasValue) {\n          yield keyMatch;\n        }\n      }\n    }\n  }\n\n  /**\n   * For a given prefix, find the shallowest node in the radix tree whose key either matches the prefix exactly\n   * or is the shortest matching key that is longer than the prefix.\n   *\n   * For example, if \"ab\" and \"abcd\" are inserted into the radix tree, the search root of the prefix \"abc\" would\n   * be the node matching \"abcd\". The \"abcd\" node would be the root of the subtree containing all nodes whose keys\n   * start with \"abc\", since there were no other keys that start with \"abc\" other than \"abcd\" and its children.\n   *\n   * @param   prefix the prefix for which to find the searchRoot\n   */\n  getSearchRoot(prefix: string): SearchRootMatch|undefined {\n    return this._getSearchRoot(prefix, this.root);\n  }\n\n  _getSearchRoot(k: string, currNode: RadixNode): SearchRootMatch|undefined {\n    if (k.length === 0) {\n      return { extraPrefix: k, searchRoot: currNode };\n    } else {\n      const matchingChildKey = currNode.c.findKeyHavingSharedPrefix(k);\n      if (matchingChildKey) {\n        const sharedPrefix = longestSharedPrefix(matchingChildKey, k);\n        if (sharedPrefix.length , [parent, parentKey]: [RadixNode, string]): boolean {\n    if (k.length === 0) {\n      if (currNode.b) {\n        currNode.b = false;\n        currNode.v = undefined;\n        if (currNode.c.size === 1) {\n          const [childKey, child] = currNode.c.entries().next().value;\n          if (!currNode.c.delete(childKey)) {\n            return false;\n          }\n          if (!parent.c.delete(parentKey)) {\n            return false;\n          }\n          const newChildKey = parentKey + childKey;\n          parent.c.set(newChildKey, child);\n        } else if (currNode.c.size === 0) {\n          parent.c.delete(parentKey);\n        }\n        return true;\n      }\n    } else {\n      const matchingChildKey = currNode.c.findKeyHavingSharedPrefix(k);\n      if (matchingChildKey) {\n        const sharedPrefix = longestSharedPrefix(matchingChildKey, k);\n        if (sharedPrefix === matchingChildKey) {\n          return this._delete(\n            k.slice(matchingChildKey.length),\n            currNode.c.get(matchingChildKey),\n            [currNode, matchingChildKey]\n          );\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/radix-node-edges.ts\n            \n            class\n            RadixNodeEdges\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                src/radix-node.ts\n            \n            class\n            RadixNode\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/radix-tree.ts\n            \n            class\n            RadixTree\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decreasingPrefixesOf\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            increasingPrefixesOf\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            longestSharedPrefix\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            variable\n            defaultPruner\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            double-ended-queue : ^2.1.0-0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SearchType   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        SearchType\n                    \n                \n                    \n                        \n                            Types of tree traversals\n\n                        \n                    \n                        \n                            \n                                 BreadFirst\n                            \n                        \n                        \n                            \n                                Value : BREADTH_FIRST\n                            \n                        \n                        \n                            \n                                 DepthFirstPreorder\n                            \n                        \n                        \n                            \n                                Value : DEPTH_FIRST_PRE_ORDER\n                            \n                        \n                        \n                            \n                                 DepthFirstPostorder\n                            \n                        \n                        \n                            \n                                Value : DEPTH_FIRST_POST_ORDER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            decreasingPrefixesOf   (src/.../utils.ts)\n                        \n                        \n                            increasingPrefixesOf   (src/.../utils.ts)\n                        \n                        \n                            longestSharedPrefix   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            decreasingPrefixesOf\n                        \n                        \n                    \n                \n            \n            \n                \ndecreasingPrefixesOf(s)\n                \n            \n\n\n\n\n            \n                \n                    Get all prefixes of a given string in descending order of length.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            for (const s of utils.decreasingPrefixesOf(&quot;abc&quot;)) {\nconsole.log(s); // prints &quot;abc&quot;, &quot;ab&quot;, &quot;a&quot;\n}\n                        \n                        \n                            for (const s of utils.decreasingPrefixesOf(&quot;&quot;)) { } // loop never entered\n                        \n                    \n                    \n                        Returns :     IterableIterator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            increasingPrefixesOf\n                        \n                        \n                    \n                \n            \n            \n                \nincreasingPrefixesOf(s)\n                \n            \n\n\n\n\n            \n                \n                    Get all prefixes of a given string in ascending order of length.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            for (const s of utils.increasingPrefixesOf(&quot;abc&quot;)) {\nconsole.log(s); // prints &quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;\n}\n                        \n                        \n                            for (const s of utils.increasingPrefixesOf(&quot;&quot;)) { } // never enters loops\n                        \n                    \n                    \n                        Returns :     IterableIterator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            longestSharedPrefix\n                        \n                        \n                    \n                \n            \n            \n                \nlongestSharedPrefix(s1, s2)\n                \n            \n\n\n\n\n            \n                \n                    Get the longest shared prefix of two strings.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    s1\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe first string\n\n\n                                    \n                                \n                                \n                                    s2\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe second string\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            utils.longestSharedPrefix(&quot;abc&quot;, &quot;ab&quot;); // &quot;ab&quot;\n                        \n                        \n                            utils.longestSharedPrefix(&quot;abc&quot;, &quot;xx&quot;); // undefined\n                        \n                        \n                            utils.longestSharedPrefix(&quot;abc&quot;, &quot;&quot;)\n                        \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \nthe longest shared prefix of s1 and s2, undefined if no shared prefix\n\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nxradix\nA fast, clean, tested, and documented implementation of the Radix Tree data structure.\nAlso, comes with special hooks for various tree-traversals starting at the first node matching a given prefix. These include depth-first (pre-order and post-order) and breadth-first.\nThis data structure is a performant and simple choice for implementing autocomplete.\nExamples\nconst { RadixTree } = require('xradix');\n\nconst rt = new RadixTree();\nrt.set(\"xx\",     1);        // equivalently,\nrt.set(\"xxA\",    2);        //\nrt.set(\"xxB\",    3);        //\nrt.set(\"xxC\",    4);        // new RadixTree([\nrt.set(\"xxCxxA\", 5);        //   [\"xx\",     1], [\"xxA\",    2], [\"xxB\",  3], [\"xxC\",  4],\nrt.set(\"xxCxxB\", 6);        //   [\"xxCxxA\", 5], [\"xxCxxB\", 6], [\"xxCx\", 7]\nrt.set(\"xxCx\",   7);        // ]) which creates this tree, whose node depths are marked above it\n\n\n   0            1           2         3         4           5\n\n                    ┌──A──( 2 )\n                    ├──B──( 3 )\n( root )──xx──( 1 )─┤                               ┌──A──( 5 )\n                    └──C──( 4 )──x──( 7 )──x──( _ )─┤\n                                                    └──B──( 6 )this tree now has the following behaviour:\nrt.get(\"xxCx\").value;// 7\nrt.get(\"xxCx\").depth;// 3\n\nrt.get(\"not in the tree\");// undefined\n\nrt.getAll(\"\");\n/* generator* [\n  { key: \"xx\",     value: 1, depth: 1, ... },          default traversal: DFS pre-order\n  { key: \"xxA\",    value: 2, depth: 2, ... },          notice the node with no value is skipped\n  { key: \"xxB\",    value: 3, depth: 2, ... },\n  { key: \"xxC\",    value: 4, depth: 2, ... },\n  { key: \"xxCx\",   value: 7, depth: 3, ... },\n  { key: \"xxCxxA\", value: 5, depth: 4, ... },\n  { key: \"xxCxxB\", value: 6, depth: 4, ... }\n] */\n\nrt.get(\"xxCxx\");// undefined\nrt.get(\"xxCxx\", { allNodes: true });// {key: \"xxCxx\", value: undefined, depth: 4, ...}\n\nrt.getAll(\"xxCxx\", { allNodes: true });\n/* generator* [\n { key: \"xxCxx\",  value: undefined, depth: 0, ... },\n { key: \"xxcxxA\", value: 6,         depth: 1, ... },\n { key: \"xxCxxB\", value: 5,         depth: 1, ... }    sibling nodes in random order\n] */\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            KeyMatch   (src/.../constants.ts)\n                        \n                        \n                            Pruner   (src/.../constants.ts)\n                        \n                        \n                            SearchRootMatch   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n    \n        \n            \n                \n                    \n                    KeyMatch\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Pruner\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SearchRootMatch\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultPruner   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultPruner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Pruner\n\n                        \n                    \n                    \n                        \n                            Default value : () => true\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
